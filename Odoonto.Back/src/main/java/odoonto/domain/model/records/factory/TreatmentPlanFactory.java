package odoonto.domain.model.records.factory;

import org.jmolecules.ddd.annotation.Factory;

import odoonto.domain.model.records.entities.TreatmentEntity;
import odoonto.domain.model.records.valueobjects.TreatmentId;
import odoonto.domain.model.records.valueobjects.TreatmentType;
import odoonto.domain.model.records.valueobjects.ToothNumber;
import odoonto.domain.model.records.valueobjects.TimestampValue;
import odoonto.domain.model.shared.valueobjects.MoneyValue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Factory
public final class TreatmentPlanFactory {

    private TreatmentPlanFactory() {}

    public static List<TreatmentEntity> createBasicTreatmentPlan(final ToothNumber toothNumber) {
        final List<TreatmentEntity> treatments = new ArrayList<>();
        
        // Basic consultation first
        treatments.add(createTreatment(TreatmentType.CONSULTATION, toothNumber, 
                                     new MoneyValue(new BigDecimal("50.00"), "USD")));
        
        // Basic cleaning
        treatments.add(createTreatment(TreatmentType.CLEANING, toothNumber, 
                                     new MoneyValue(new BigDecimal("80.00"), "USD")));
        
        return treatments;
    }

    public static List<TreatmentEntity> createEmergencyTreatmentPlan(final ToothNumber toothNumber) {
        final List<TreatmentEntity> treatments = new ArrayList<>();
        
        // Emergency consultation
        treatments.add(createTreatment(TreatmentType.CONSULTATION, toothNumber, 
                                     new MoneyValue(new BigDecimal("75.00"), "USD")));
        
        // Emergency extraction if needed
        treatments.add(createTreatment(TreatmentType.EXTRACTION, toothNumber, 
                                     new MoneyValue(new BigDecimal("150.00"), "USD")));
        
        return treatments;
    }

    public static List<TreatmentEntity> createRootCanalTreatmentPlan(final ToothNumber toothNumber) {
        final List<TreatmentEntity> treatments = new ArrayList<>();
        
        // Consultation
        treatments.add(createTreatment(TreatmentType.CONSULTATION, toothNumber, 
                                     new MoneyValue(new BigDecimal("50.00"), "USD")));
        
        // Root canal treatment
        treatments.add(createTreatment(TreatmentType.ROOT_CANAL, toothNumber, 
                                     new MoneyValue(new BigDecimal("800.00"), "USD")));
        
        // Crown after root canal
        treatments.add(createTreatment(TreatmentType.CROWN, toothNumber, 
                                     new MoneyValue(new BigDecimal("600.00"), "USD")));
        
        return treatments;
    }

    private static TreatmentEntity createTreatment(final TreatmentType treatmentType,
                                                  final ToothNumber toothNumber,
                                                  final MoneyValue cost) {
        return new TreatmentEntity(
            new TreatmentId(java.util.UUID.randomUUID().toString()),
            toothNumber,
            treatmentType,
            cost,
            TimestampValue.now(),
            "Generated by treatment plan"
        );
    }
} 
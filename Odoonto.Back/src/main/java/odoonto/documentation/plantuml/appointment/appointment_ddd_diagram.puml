@startuml

title Arquitectura DDD: Appointment

skinparam backgroundColor white
skinparam defaultFontName Arial
skinparam defaultFontSize 12
scale max 1024 width
left to right direction

package "Presentation" as presentation #lightgray {
  class AppointmentController {
    - appointmentService: AppointmentService

    + getAllAppointments()
    + getAppointmentById()
    .. más métodos ..
  }
}

package "Application" as application #lightgreen {
  class AppointmentCreateDTO {
    - doctorId: str
    - patientId: str
    .. más campos ..

    + getDoctorId()
    + setDoctorId()
    .. más métodos ..
  }
  class AppointmentDTO {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class AppointmentConflictException
  class AppointmentMapper {
    + toDTO()
    + toEntity()
    .. más métodos ..
  }
  interface AppointmentCancelUseCase {
    ~ cancelAppointment()
  }
  interface AppointmentCreateUseCase {
    ~ createAppointment()
  }
  interface AppointmentQueryUseCase {
    ~ findById()
    ~ findAll()
    .. más métodos ..
  }
  interface AppointmentUpdateUseCase {
    ~ updateAppointment()
  }
  interface ReactiveAppointmentRepository {
    ~ findById()
    ~ save()
    .. más métodos ..
  }
  class AppointmentCancelService {
    - appointmentRepository: ReactiveAppointmentRepository

    + cancelAppointment()
  }
  class AppointmentCreateService {
    - appointmentRepository: ReactiveAppointmentRepository
    - doctorRepository: ReactiveDoctorRepository
    .. más campos ..

    + createAppointment()
  }
  class AppointmentQueryService {
    - appointmentRepository: ReactiveAppointmentRepository
    - appointmentMapper: AppointmentMapper

    + findById()
    + findAll()
    .. más métodos ..
  }
  class AppointmentUpdateService {
    - appointmentRepository: ReactiveAppointmentRepository
    - doctorRepository: ReactiveDoctorRepository
    .. más campos ..

    + updateAppointment()
  }
  class AppointmentService {
    - appointmentRepository: ReactiveAppointmentRepository
    - patientRepository: ReactivePatientRepository
    .. más campos ..

    + getAllAppointments()
    + getAppointmentById()
    .. más métodos ..
  }
  class ReactiveAppointmentValidationService {
    - appointmentRepository: ReactiveAppointmentRepository
    - doctorRepository: ReactiveDoctorRepository
    .. más campos ..

    + validateNewAppointment()
    + validateAppointmentUpdate()
    .. más métodos ..
  }
}

package "Domain" as domain #lightblue {
  class AppointmentScheduledEvent {
    - appointmentId: str
    - patientId: str
    .. más campos ..

    + getAppointmentId()
    + getPatientId()
    .. más métodos ..
  }
  class AppointmentStatusChangedEvent {
    - appointmentId: str
    - previousStatus: AppointmentStatus
    .. más campos ..

    + getAppointmentId()
    + getPreviousStatus()
    .. más métodos ..
  }
  class AppointmentOverlapException {
    - FORMATTER: DateTimeFormatter
    - appointmentId1: str
    .. más campos ..

    + getAppointmentId1()
    + getAppointmentId2()
    .. más métodos ..
  }
  class InvalidAppointmentTimeException
  class Appointment {
    - id: str
    - patientId: str
    .. más campos ..

    - validateAppointmentTime()
    - validateIds()
    .. más métodos ..
  }
  class AppointmentId {
    - value: str

    + generate()
    + of()
    .. más métodos ..
  }
  class AppointmentTime {
    - startDateTime: LocalDateTime
    - durationMinutes: int

    - validateStartDateTime()
    - validateDuration()
    .. más métodos ..
  }
  class AppointmentSpecification {
    + byDoctor()
    + byPatient()
    .. más métodos ..
  }
  class AppointmentScheduledEvent {
    - appointmentId: str
    - patientId: str
    .. más campos ..

    + getAppointmentId()
    + getPatientId()
    .. más métodos ..
  }
  class AppointmentStatusChangedEvent {
    - appointmentId: str
    - previousStatus: AppointmentStatus
    .. más campos ..

    + getAppointmentId()
    + getPreviousStatus()
    .. más métodos ..
  }
  class AppointmentOverlapException {
    - FORMATTER: DateTimeFormatter
    - appointmentId1: str
    .. más campos ..

    + getAppointmentId1()
    + getAppointmentId2()
    .. más métodos ..
  }
  class InvalidAppointmentTimeException
  class Appointment {
    - id: str
    - patientId: str
    .. más campos ..

    - validateAppointmentTime()
    - validateIds()
    .. más métodos ..
  }
  class AppointmentId {
    - value: str

    + generate()
    + of()
    .. más métodos ..
  }
  class AppointmentTime {
    - startDateTime: LocalDateTime
    - durationMinutes: int

    - validateStartDateTime()
    - validateDuration()
    .. más métodos ..
  }
  class AppointmentSpecification {
    + byDoctor()
    + byPatient()
    .. más métodos ..
  }
  class DoctorSchedule {
    - dayOfWeek: DayOfWeek
    - startTime: LocalTime
    .. más campos ..

    + isTimeInSchedule()
    + isRangeInSchedule()
    .. más métodos ..
  }
}

package "Infrastructure" as infrastructure #lightyellow {
  class FirestoreAppointmentEntity {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class ReactiveAppointmentRepositoryAdapter {
    - appointmentsCollection: CollReference

    + findById()
    + save()
    .. más métodos ..
  }
}

' Dependencias entre capas de arquitectura
presentation --> application
application --> domain
infrastructure --> domain
infrastructure --> application

' Relaciones entre clases principales
ReactiveAppointmentRepositoryAdapter ..|> ReactiveAppointmentRepository
AppointmentController --> AppointmentService
AppointmentCreateService ..|> AppointmentCreateUseCase
AppointmentCancelService ..|> AppointmentCancelUseCase
AppointmentQueryService ..|> AppointmentQueryUseCase
AppointmentUpdateService ..|> AppointmentUpdateUseCase
AppointmentQueryService --> ReactiveAppointmentRepository
AppointmentService --> AppointmentMapper
ReactiveAppointmentValidationService --> ReactiveAppointmentRepository
AppointmentCreateService --> AppointmentMapper
AppointmentService --> ReactiveAppointmentRepository
AppointmentQueryService --> AppointmentMapper
AppointmentCreateService --> ReactiveAppointmentRepository
AppointmentCancelService --> ReactiveAppointmentRepository
AppointmentUpdateService --> AppointmentMapper
legend right
  Arquitectura Domain-Driven Design
  Entidad: Appointment
endlegend

@enduml
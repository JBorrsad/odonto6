@startuml

title Arquitectura DDD: Odontogram

skinparam backgroundColor white
skinparam defaultFontName Arial
skinparam defaultFontSize 12
scale max 1024 width
left to right direction

package "Presentation" as presentation #lightgray {
  class OdontogramController {
    - odontogramService: OdontogramService
    - patientOdontogramUseCase: PatientOdontogramUseCase

    + getOdontogramById()
    + getPatientOdontogram()
    .. más métodos ..
  }
}

package "Application" as application #lightgreen {
  class OdontogramUpdateDTO {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class OdontogramDTO {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class OdontogramNotFoundException
  class OdontogramMapper {
    + toDTO()
    + updateFromDTO()
    .. más métodos ..
  }
  interface OdontogramQueryUseCase {
    ~ findById()
    ~ findByPatientId()
    .. más métodos ..
  }
  interface PatientOdontogramUseCase {
    ~ getPatientOdontogram()
    ~ getPatientOdontogramDTO()
    .. más métodos ..
  }
  interface ReactiveOdontogramRepository {
    ~ findAll()
    ~ findById()
    .. más métodos ..
  }
  class OdontogramQueryService {
    - odontogramRepository: ReactiveOdontogramRepository
    - odontogramMapper: OdontogramMapper

    + findById()
    + findByPatientId()
    .. más métodos ..
  }
  class OdontogramService {
    - odontogramRepository: ReactiveOdontogramRepository
    - odontogramMapper: OdontogramMapper

    + findAll()
    + findById()
    .. más métodos ..
  }
  class PatientOdontogramService {
    - patientRepository: ReactivePatientRepository
    - odontogramRepository: ReactiveOdontogramRepository
    .. más campos ..

    + getPatientOdontogram()
    + getPatientOdontogramDTO()
    .. más métodos ..
  }
}

package "Domain" as domain #lightblue {
  class Odontogram {
    - id: OdontogramId
    - teeth: Map<...>
    .. más campos ..

    + addLesion()
    + removeLesion()
    .. más métodos ..
  }
  class OdontogramId {
    - value: str

    + of()
    + generate()
    .. más métodos ..
  }
  class Odontogram {
    - id: OdontogramId
    - teeth: Map<...>
    .. más campos ..

    + addLesion()
    + removeLesion()
    .. más métodos ..
  }
  class OdontogramId {
    - value: str

    + of()
    + generate()
    .. más métodos ..
  }
  class DentalDiagnosisService {
    + generateDiagnosis()
    - countLesionsByType()
    .. más métodos ..
  }
  class DentalDiagnosisService {
    + generateDiagnosis()
    - countLesionsByType()
    .. más métodos ..
  }
}

package "Infrastructure" as infrastructure #lightyellow {
  class FirestoreOdontogramEntity {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class ReactiveOdontogramRepositoryAdapter {
    - odontogramsCollection: CollReference
    - historicalOdontogramsCollection: CollReference

    + findAll()
    + findById()
    .. más métodos ..
  }
}

' Dependencias entre capas de arquitectura
presentation --> application
application --> domain
infrastructure --> domain
infrastructure --> application

' Relaciones entre clases principales
Odontogram --> OdontogramId
Odontogram --> OdontogramId
ReactiveOdontogramRepositoryAdapter ..|> ReactiveOdontogramRepository
OdontogramController --> OdontogramService
OdontogramController --> PatientOdontogramUseCase
OdontogramQueryService ..|> OdontogramQueryUseCase
PatientOdontogramService ..|> PatientOdontogramUseCase
OdontogramService --> OdontogramMapper
OdontogramQueryService --> OdontogramMapper
OdontogramService --> ReactiveOdontogramRepository
OdontogramQueryService --> ReactiveOdontogramRepository
PatientOdontogramService --> ReactiveOdontogramRepository
PatientOdontogramService --> OdontogramMapper
legend right
  Arquitectura Domain-Driven Design
  Entidad: Odontogram
endlegend

@enduml
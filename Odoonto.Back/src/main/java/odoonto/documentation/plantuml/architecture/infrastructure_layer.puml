@startuml Infrastructure Layer

!theme plain
skinparam packageStyle rectangle
skinparam backgroundColor white
skinparam ClassBackgroundColor WhiteSmoke
skinparam ClassBorderColor Black
skinparam ArrowColor Black
skinparam linetype ortho

package "Infrastructure Layer" {
  package "Persistence" {
    package "Reactive" {
      class ReactivePatientRepositoryAdapter {
        -firestoreTemplate: FirestoreTemplate
        +save(patient: Patient): Mono<Patient>
        +findById(id: PatientId): Mono<Patient>
        +findAll(): Flux<Patient>
        +deleteById(id: PatientId): Mono<Void>
        -mapToEntity(patient: Patient): FirestorePatientEntity
        -mapToDomain(entity: FirestorePatientEntity): Patient
      }
      
      class ReactiveOdontogramRepositoryAdapter
      class ReactiveMedicalRecordRepositoryAdapter
      class ReactiveDoctorRepositoryAdapter
      class ReactiveAppointmentRepositoryAdapter
    }
    
    package "Entity" {
      class FirestorePatientEntity {
        +id: String
        +name: Map<String, String>
        +email: String
        +phoneNumber: String
        +address: Map<String, String>
        +birthDate: Timestamp
        +sexo: String
      }
      
      class FirestoreOdontogramEntity
      class FirestoreMedicalRecordEntity
      class FirestoreDoctorEntity
      class FirestoreAppointmentEntity
    }
  }
  
  package "Config" {
    class FirestoreConfig {
      +firestore(): Firestore
      +firestoreTemplate(firestore: Firestore): FirestoreTemplate
    }
    
    class DiagramGeneratorConfig
    class StartupMenuConfig
    class ServiceInitializer
    class WebConfig
  }
  
  package "Security" {
    class SecurityConfig {
      +securityFilterChain(): SecurityFilterChain
      +passwordEncoder(): PasswordEncoder
    }
  }
  
  package "Tools" {
    class DDDDiagramGenerator {
      -domainClasses: List<Class<?>>
      -applicationClasses: List<Class<?>>
      +generateDDDDiagrams()
      -generateDomainLayerDiagram()
    }
    
    class GenerateDDDDiagrams {
      +main(args: String[])
    }
  }
  
  package "Testing" {
    class DataSeeder {
      +seedSampleData()
    }
  }
}

' Interfaces desde la capa de aplicación
interface ReactivePatientRepository
interface ReactiveOdontogramRepository
interface ReactiveMedicalRecordRepository
interface ReactiveDoctorRepository
interface ReactiveAppointmentRepository

' Implementaciones
ReactivePatientRepository <|.. ReactivePatientRepositoryAdapter
ReactiveOdontogramRepository <|.. ReactiveOdontogramRepositoryAdapter
ReactiveMedicalRecordRepository <|.. ReactiveMedicalRecordRepositoryAdapter
ReactiveDoctorRepository <|.. ReactiveDoctorRepositoryAdapter
ReactiveAppointmentRepository <|.. ReactiveAppointmentRepositoryAdapter

' Relaciones con entidades
ReactivePatientRepositoryAdapter -- FirestorePatientEntity
ReactiveOdontogramRepositoryAdapter -- FirestoreOdontogramEntity
ReactiveMedicalRecordRepositoryAdapter -- FirestoreMedicalRecordEntity
ReactiveDoctorRepositoryAdapter -- FirestoreDoctorEntity
ReactiveAppointmentRepositoryAdapter -- FirestoreAppointmentEntity

' Configuración
FirestoreConfig -- ReactivePatientRepositoryAdapter
FirestoreConfig -- ReactiveOdontogramRepositoryAdapter
FirestoreConfig -- ReactiveMedicalRecordRepositoryAdapter

@enduml 
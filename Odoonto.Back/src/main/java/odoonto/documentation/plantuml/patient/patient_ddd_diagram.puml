@startuml

title Arquitectura DDD: Patient

skinparam backgroundColor white
skinparam defaultFontName Arial
skinparam defaultFontSize 12
scale max 1024 width
left to right direction

package "Presentation" as presentation #lightgray {
  class PatientController {
    - patientQueryUseCase: PatientQueryUseCase
    - patientCreateUseCase: PatientCreateUseCase
    .. más campos ..

    + getAllPatients()
    + getPatientById()
    .. más métodos ..
  }
  class MedicalRecordController {
    - medicalRecordQueryUseCase: MedicalRecordQueryUseCase
    - medicalEntryAddUseCase: MedicalEntryAddUseCase

    + getMedicalRecordById()
    + getAllMedicalRecords()
    .. más métodos ..
  }
}

package "Application" as application #lightgreen {
  class PatientCreateDTO {
    - nombre: str
    - apellido: str
    .. más campos ..

    + getNombre()
    + setNombre()
    .. más métodos ..
  }
  class PatientUpdateDTO {
    - id: str
    - nombre: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class PatientDTO {
    - id: str
    - nombre: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class PatientNotFoundException
  class PatientMapper {
    + toDTO()
    + toEntity()
    .. más métodos ..
  }
  interface PatientCreateUseCase {
    ~ createPatient()
  }
  interface PatientDeleteUseCase {
    ~ deletePatient()
  }
  interface PatientOdontogramUseCase {
    ~ getPatientOdontogram()
    ~ getPatientOdontogramDTO()
    .. más métodos ..
  }
  interface PatientQueryUseCase {
    ~ getAllPatients()
    ~ getPatientById()
    .. más métodos ..
  }
  interface PatientUpdateUseCase {
    ~ updatePatient()
  }
  interface ReactivePatientRepository {
    ~ findAll()
    ~ findById()
    .. más métodos ..
  }
  class PatientCreateService {
    - patientRepository: ReactivePatientRepository
    - patientMapper: PatientMapper

    + createPatient()
  }
  class PatientDeleteService {
    - patientRepository: ReactivePatientRepository

    + deletePatient()
  }
  class PatientOdontogramService {
    - patientRepository: ReactivePatientRepository
    - odontogramRepository: ReactiveOdontogramRepository
    .. más campos ..

    + getPatientOdontogram()
    + getPatientOdontogramDTO()
    .. más métodos ..
  }
  class PatientQueryService {
    - patientRepository: ReactivePatientRepository
    - patientMapper: PatientMapper

    + getAllPatients()
    + getPatientById()
    .. más métodos ..
  }
  class PatientUpdateService {
    - patientRepository: ReactivePatientRepository
    - patientMapper: PatientMapper

    + updatePatient()
  }
  class MedicalEntryCreateDTO {
    - medicalRecordId: str
    - type: str
    .. más campos ..

    + getMedicalRecordId()
    + setMedicalRecordId()
    .. más métodos ..
  }
  class MedicalRecordCreateDTO {
    - patientId: str
    - allergies: List<str>
    .. más campos ..

    + getPatientId()
    + setPatientId()
    .. más métodos ..
  }
  class MedicalEntryCreateDTO {
    - type: str
    - description: str
    .. más campos ..

    + getType()
    + setType()
    .. más métodos ..
  }
  class MedicalRecordDTO {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class MedicalEntryDTO {
    - id: str
    - type: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class MedicalRecordNotFoundException
  class MedicalRecordMapper {
    + toDTO()
    - mapNotesToEntryDTOs()
    .. más métodos ..
  }
  interface MedicalEntryAddUseCase {
    ~ addEntry()
  }
  interface MedicalEntryRemoveUseCase {
    ~ removeEntry()
  }
  interface MedicalRecordCreateUseCase {
    ~ createMedicalRecord()
  }
  interface MedicalRecordQueryUseCase {
    ~ findById()
    ~ findByPatientId()
    .. más métodos ..
  }
  interface ReactiveMedicalRecordRepository {
    ~ findAll()
    ~ findById()
    .. más métodos ..
  }
  class MedicalEntryAddService {
    - medicalRecordRepository: ReactiveMedicalRecordRepository

    + addEntry()
  }
  class MedicalEntryRemoveService {
    - medicalRecordRepository: ReactiveMedicalRecordRepository

    + removeEntry()
  }
  class MedicalRecordCreateService {
    - medicalRecordRepository: ReactiveMedicalRecordRepository
    - patientRepository: ReactivePatientRepository
    .. más campos ..

    + createMedicalRecord()
  }
  class MedicalRecordQueryService {
    - medicalRecordRepository: ReactiveMedicalRecordRepository
    - medicalRecordMapper: MedicalRecordMapper

    + findById()
    + findByPatientId()
    .. más métodos ..
  }
}

package "Domain" as domain #lightblue {
  class PatientRegisteredEvent {
    - patientId: str
    - name: str
    .. más campos ..

    + getPatientId()
    + getName()
    .. más métodos ..
  }
  class Patient {
    - id: PatientId
    - nombre: str
    .. más campos ..

    - validateBasicInfo()
    + getEdad()
    .. más métodos ..
  }
  class PatientId {
    - value: str

    + of()
    + generate()
    .. más métodos ..
  }
  class PatientSpecification {
    + nameOrLastNameContains()
    + bySexo()
    .. más métodos ..
  }
  class PatientRegisteredEvent {
    - patientId: str
    - name: str
    .. más campos ..

    + getPatientId()
    + getName()
    .. más métodos ..
  }
  class Patient {
    - id: PatientId
    - nombre: str
    .. más campos ..

    - validateBasicInfo()
    + getEdad()
    .. más métodos ..
  }
  class PatientId {
    - value: str

    + of()
    + generate()
    .. más métodos ..
  }
  class PatientSpecification {
    + nameOrLastNameContains()
    + bySexo()
    .. más métodos ..
  }
  class MedicalRecord {
    - id: UUID
    - patientId: UUID
    .. más campos ..

    + getId()
    + getPatientId()
    .. más métodos ..
  }
  class MedicalNote {
    - id: UUID
    - content: str
    .. más campos ..

    + getId()
    + getContent()
    .. más métodos ..
  }
  class MedicalEntry {
    - id: str
    - type: str
    .. más campos ..

    + addNotes()
    + getId()
    .. más métodos ..
  }
  class MedicalRecord {
    - id: MedicalRecordId
    - createdAt: LocalDateTime
    .. más campos ..

    + addEntry()
    + getEntries()
    .. más métodos ..
  }
  class MedicalRecordId {
    - value: str

    + of()
    + generate()
    .. más métodos ..
  }
  class MedicalRecordPolicy {
    - MAX_ENTRY_TITLE_LENGTH: int
    - MAX_ENTRY_CONTENT_LENGTH: int
    .. más campos ..

    + validateMedicalEntry()
    + canAddEntry()
    .. más métodos ..
  }
  class MedicalRecordService {
    - policy: MedicalRecordPolicy

    + addEntry()
    + getEntriesInDateRange()
    .. más métodos ..
  }
  class MedicalRecordSummary {
    - patientId: str
    - totalEntries: int
    .. más campos ..

    + getPatientId()
    + setPatientId()
    .. más métodos ..
  }
  class MedicalRecord {
    - id: UUID
    - patientId: UUID
    .. más campos ..

    + getId()
    + getPatientId()
    .. más métodos ..
  }
  class MedicalNote {
    - id: UUID
    - content: str
    .. más campos ..

    + getId()
    + getContent()
    .. más métodos ..
  }
  class MedicalRecord {
    - id: MedicalRecordId
    - createdAt: LocalDateTime
    .. más campos ..

    + addEntry()
    + getEntries()
    .. más métodos ..
  }
  class MedicalRecordId {
    - value: str

    + of()
    + generate()
    .. más métodos ..
  }
  class MedicalRecordService {
    - policy: MedicalRecordPolicy

    + addEntry()
    + getEntriesInDateRange()
    .. más métodos ..
  }
  class MedicalRecordSummary {
    - patientId: str
    - totalEntries: int
    .. más campos ..

    + getPatientId()
    + setPatientId()
    .. más métodos ..
  }
}

package "Infrastructure" as infrastructure #lightyellow {
  class FirestorePatientEntity {
    - id: str
    - nombre: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class ReactivePatientRepositoryAdapter {
    - COLLECTION_NAME: str
    - patientsCollection: CollReference

    + findById()
    + findById()
    .. más métodos ..
  }
  class FirestoreMedicalRecordEntity {
    - id: str
    - patientId: str
    .. más campos ..

    + getId()
    + setId()
    .. más métodos ..
  }
  class FirestoreMedicalEntryEntity {
    - date: str
    - description: str
    .. más campos ..

    + getDate()
    + setDate()
    .. más métodos ..
  }
  class ReactiveMedicalRecordRepositoryAdapter {
    - medicalRecordsCollection: CollReference

    + findAll()
    + findById()
    .. más métodos ..
  }
}

' Dependencias entre capas de arquitectura
presentation --> application
application --> domain
infrastructure --> domain
infrastructure --> application

' Relaciones entre clases principales
Patient --> PatientId
Patient --> PatientId
ReactivePatientRepositoryAdapter ..|> ReactivePatientRepository
PatientController --> PatientCreateUseCase
PatientController --> PatientUpdateUseCase
PatientController --> PatientDeleteUseCase
PatientController --> PatientQueryUseCase
PatientDeleteService ..|> PatientDeleteUseCase
PatientOdontogramService ..|> PatientOdontogramUseCase
PatientUpdateService ..|> PatientUpdateUseCase
PatientCreateService ..|> PatientCreateUseCase
PatientQueryService ..|> PatientQueryUseCase
PatientDeleteService --> ReactivePatientRepository
PatientUpdateService --> PatientMapper
PatientQueryService --> ReactivePatientRepository
legend right
  Arquitectura Domain-Driven Design
  Entidad: Patient
endlegend

@enduml